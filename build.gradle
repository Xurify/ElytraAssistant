plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://repo.spongepowered.org/maven" }
}

loom {
    splitEnvironmentSourceSets()
    mods {
        "elytraassistant" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

def getArchiveName = { extension ->
    "${archivesBaseName}-${project.modding_api}-${project.mod_version}-mc${project.minecraft_version}${extension ? '.' + extension : ''}"
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
    archiveFileName = getArchiveName("jar")
}

tasks.named("remapJar") { archiveFileName = getArchiveName("jar") }
tasks.named("remapSourcesJar") { archiveFileName = getArchiveName("sources.jar") }

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

def createArchive = { TaskContainer tasks, String type, String extension ->
    tasks.create("create${type.capitalize()}", type == "tar" ? Tar : Zip) {
        archiveFileName = getArchiveName(extension)
        destinationDirectory = file("${buildDir}/distributions")
        if (type == "tar") compression = Compression.GZIP
        from(projectDir) {
            include 'src/**'
            include 'gradle/**'
            include 'build.gradle'
            include 'gradle.properties'
            include 'gradlew'
            include 'gradlew.bat'
            include 'LICENSE'
            include 'README.md'
            // Add any other files or directories you want to include
        }
    }
}

createArchive(tasks, "zip", "zip")
createArchive(tasks, "tar", "tar.gz")

task createDistributions {
    dependsOn tasks.createZip, tasks.createTar
}

build.dependsOn createDistributions